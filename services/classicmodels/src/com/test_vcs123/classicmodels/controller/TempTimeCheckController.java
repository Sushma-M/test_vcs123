/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.test_vcs123.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.test_vcs123.classicmodels.TempTimeCheck;
import com.test_vcs123.classicmodels.service.TempTimeCheckService;


/**
 * Controller object for domain model class TempTimeCheck.
 * @see TempTimeCheck
 */
@RestController("classicmodels.TempTimeCheckController")
@Api(value = "TempTimeCheckController", description = "Exposes APIs to work with TempTimeCheck resource.")
@RequestMapping("/classicmodels/TempTimeCheck")
public class TempTimeCheckController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempTimeCheckController.class);

    @Autowired
	@Qualifier("classicmodels.TempTimeCheckService")
	private TempTimeCheckService tempTimeCheckService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new TempTimeCheck instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempTimeCheck createTempTimeCheck(@RequestBody TempTimeCheck tempTimeCheck) {
		LOGGER.debug("Create TempTimeCheck with information: {}" , tempTimeCheck);

		tempTimeCheck = tempTimeCheckService.create(tempTimeCheck);
		LOGGER.debug("Created TempTimeCheck with information: {}" , tempTimeCheck);

	    return tempTimeCheck;
	}

    @ApiOperation(value = "Returns the TempTimeCheck instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempTimeCheck getTempTimeCheck(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting TempTimeCheck with id: {}" , id);

        TempTimeCheck foundTempTimeCheck = tempTimeCheckService.getById(id);
        LOGGER.debug("TempTimeCheck details with id: {}" , foundTempTimeCheck);

        return foundTempTimeCheck;
    }

    @ApiOperation(value = "Updates the TempTimeCheck instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempTimeCheck editTempTimeCheck(@PathVariable("id") Integer id, @RequestBody TempTimeCheck tempTimeCheck) {
        LOGGER.debug("Editing TempTimeCheck with id: {}" , tempTimeCheck.getId());

        tempTimeCheck.setId(id);
        tempTimeCheck = tempTimeCheckService.update(tempTimeCheck);
        LOGGER.debug("TempTimeCheck details with id: {}" , tempTimeCheck);

        return tempTimeCheck;
    }

    @ApiOperation(value = "Deletes the TempTimeCheck instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTempTimeCheck(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting TempTimeCheck with id: {}" , id);

        TempTimeCheck deletedTempTimeCheck = tempTimeCheckService.delete(id);

        return deletedTempTimeCheck != null;
    }

    /**
     * @deprecated Use {@link #findTempTimeChecks(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TempTimeCheck instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TempTimeCheck> searchTempTimeChecksByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TempTimeChecks list by query filter:{}", (Object) queryFilters);
        return tempTimeCheckService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TempTimeCheck instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TempTimeCheck> findTempTimeChecks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TempTimeChecks list by filter:", query);
        return tempTimeCheckService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TempTimeCheck instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TempTimeCheck> filterTempTimeChecks(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TempTimeChecks list by filter", query);
        return tempTimeCheckService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTempTimeChecks(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tempTimeCheckService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTempTimeChecksAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = TempTimeCheck.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> tempTimeCheckService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of TempTimeCheck instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTempTimeChecks( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TempTimeChecks");
		return tempTimeCheckService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTempTimeCheckAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tempTimeCheckService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TempTimeCheckService instance
	 */
	protected void setTempTimeCheckService(TempTimeCheckService service) {
		this.tempTimeCheckService = service;
	}

}