/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.test_vcs123.classicmodels.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.test_vcs123.classicmodels.ArticleTagssx;
import com.test_vcs123.classicmodels.ArticleTagssxId;
import com.test_vcs123.classicmodels.service.ArticleTagssxService;


/**
 * Controller object for domain model class ArticleTagssx.
 * @see ArticleTagssx
 */
@RestController("classicmodels.ArticleTagssxController")
@Api(value = "ArticleTagssxController", description = "Exposes APIs to work with ArticleTagssx resource.")
@RequestMapping("/classicmodels/ArticleTagssx")
public class ArticleTagssxController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ArticleTagssxController.class);

    @Autowired
	@Qualifier("classicmodels.ArticleTagssxService")
	private ArticleTagssxService articleTagssxService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new ArticleTagssx instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ArticleTagssx createArticleTagssx(@RequestBody ArticleTagssx articleTagssx) {
		LOGGER.debug("Create ArticleTagssx with information: {}" , articleTagssx);

		articleTagssx = articleTagssxService.create(articleTagssx);
		LOGGER.debug("Created ArticleTagssx with information: {}" , articleTagssx);

	    return articleTagssx;
	}

    @ApiOperation(value = "Returns the ArticleTagssx instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ArticleTagssx getArticleTagssx(@RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId, @RequestParam("blank") String blank) {

        ArticleTagssxId articletagssxId = new ArticleTagssxId();
        articletagssxId.setArticleId(articleId);
        articletagssxId.setTagId(tagId);
        articletagssxId.setBlank(blank);

        LOGGER.debug("Getting ArticleTagssx with id: {}" , articletagssxId);
        ArticleTagssx articleTagssx = articleTagssxService.getById(articletagssxId);
        LOGGER.debug("ArticleTagssx details with id: {}" , articleTagssx);

        return articleTagssx;
    }



    @ApiOperation(value = "Updates the ArticleTagssx instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ArticleTagssx editArticleTagssx(@RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId, @RequestParam("blank") String blank, @RequestBody ArticleTagssx articleTagssx) {

        articleTagssx.setArticleId(articleId);
        articleTagssx.setTagId(tagId);
        articleTagssx.setBlank(blank);

        LOGGER.debug("ArticleTagssx details with id is updated with: {}" , articleTagssx);

        return articleTagssxService.update(articleTagssx);
    }


    @ApiOperation(value = "Deletes the ArticleTagssx instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteArticleTagssx(@RequestParam("articleId") Integer articleId, @RequestParam("tagId") Integer tagId, @RequestParam("blank") String blank) {

        ArticleTagssxId articletagssxId = new ArticleTagssxId();
        articletagssxId.setArticleId(articleId);
        articletagssxId.setTagId(tagId);
        articletagssxId.setBlank(blank);

        LOGGER.debug("Deleting ArticleTagssx with id: {}" , articletagssxId);
        ArticleTagssx articleTagssx = articleTagssxService.delete(articletagssxId);

        return articleTagssx != null;
    }


    /**
     * @deprecated Use {@link #findArticleTagssxes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ArticleTagssx instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ArticleTagssx> searchArticleTagssxesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ArticleTagssxes list by query filter:{}", (Object) queryFilters);
        return articleTagssxService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ArticleTagssx instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ArticleTagssx> findArticleTagssxes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ArticleTagssxes list by filter:", query);
        return articleTagssxService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ArticleTagssx instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ArticleTagssx> filterArticleTagssxes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ArticleTagssxes list by filter", query);
        return articleTagssxService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportArticleTagssxes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return articleTagssxService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportArticleTagssxesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = ArticleTagssx.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> articleTagssxService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of ArticleTagssx instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countArticleTagssxes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ArticleTagssxes");
		return articleTagssxService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getArticleTagssxAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return articleTagssxService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ArticleTagssxService instance
	 */
	protected void setArticleTagssxService(ArticleTagssxService service) {
		this.articleTagssxService = service;
	}

}