/*Copyright (c) 2018-2019 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.test_vcs123.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.test_vcs123.classicmodels.TempTimeCheck;


/**
 * ServiceImpl object for domain model class TempTimeCheck.
 *
 * @see TempTimeCheck
 */
@Service("classicmodels.TempTimeCheckService")
@Validated
public class TempTimeCheckServiceImpl implements TempTimeCheckService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempTimeCheckServiceImpl.class);


    @Autowired
    @Qualifier("classicmodels.TempTimeCheckDao")
    private WMGenericDao<TempTimeCheck, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TempTimeCheck, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public TempTimeCheck create(TempTimeCheck tempTimeCheck) {
        LOGGER.debug("Creating a new TempTimeCheck with information: {}", tempTimeCheck);

        TempTimeCheck tempTimeCheckCreated = this.wmGenericDao.create(tempTimeCheck);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(tempTimeCheckCreated);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public TempTimeCheck getById(Integer temptimecheckId) {
        LOGGER.debug("Finding TempTimeCheck by id: {}", temptimecheckId);
        return this.wmGenericDao.findById(temptimecheckId);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public TempTimeCheck findById(Integer temptimecheckId) {
        LOGGER.debug("Finding TempTimeCheck by id: {}", temptimecheckId);
        try {
            return this.wmGenericDao.findById(temptimecheckId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No TempTimeCheck found with id: {}", temptimecheckId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public List<TempTimeCheck> findByMultipleIds(List<Integer> temptimecheckIds, boolean orderedReturn) {
        LOGGER.debug("Finding TempTimeChecks by ids: {}", temptimecheckIds);

        return this.wmGenericDao.findByMultipleIds(temptimecheckIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public TempTimeCheck update(TempTimeCheck tempTimeCheck) {
        LOGGER.debug("Updating TempTimeCheck with information: {}", tempTimeCheck);

        this.wmGenericDao.update(tempTimeCheck);
        this.wmGenericDao.refresh(tempTimeCheck);

        return tempTimeCheck;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public TempTimeCheck delete(Integer temptimecheckId) {
        LOGGER.debug("Deleting TempTimeCheck with id: {}", temptimecheckId);
        TempTimeCheck deleted = this.wmGenericDao.findById(temptimecheckId);
        if (deleted == null) {
            LOGGER.debug("No TempTimeCheck found with id: {}", temptimecheckId);
            throw new EntityNotFoundException(String.valueOf(temptimecheckId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public void delete(TempTimeCheck tempTimeCheck) {
        LOGGER.debug("Deleting TempTimeCheck with {}", tempTimeCheck);
        this.wmGenericDao.delete(tempTimeCheck);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<TempTimeCheck> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TempTimeChecks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<TempTimeCheck> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TempTimeChecks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table TempTimeCheck to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service classicmodels for table TempTimeCheck to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}